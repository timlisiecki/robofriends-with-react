{"version":3,"sources":["actions.js","api/api.js","constants.js","components/Header.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Header","nextProps","nextState","react_default","a","createElement","className","Component","Card","_ref","name","email","id","src","concat","alt","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","info","setState","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.65992967.chunk.js","sourcesContent":["import { apiCall } from './api/api';\n\nimport { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n } from './constants';\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\n\tapiCall('https://jsonplaceholder.typicode.com/users')\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n}","export const apiCall = (link) =>\n  fetch(link).then(response => response.json());","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import React, {Component } from 'react';\n\nclass Header extends Component {\n\tshouldComponentUpdate(nextProps, nextState) {\n\t\treturn false;\n\t}\n\n\trender() {\n\t\treturn <h1 className=\"f1\">RoboFriends</h1>\n\t}\n}\n\nexport default Header;","import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n\treturn (\n\t\t<div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt=\"robot\"/>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\t\tkey={i} \n\t\t\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\t\t\temail={robots[i].email} \n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t\t<input \n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\n\t\t\t\ttype=\"search\" \n\t\t\t\tplaceholder=\"Search Robots...\"\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '700px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\tconstructor(props) {\n\t\tsuper();\n\t\tthis.state = { hasError: false };\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({ hasError: true });\n\t}\n\n\trender () {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Something went wrong!</h1>\n\t\t}\n\t\treturn this.props.children;\n\t}\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\n\nimport Header from '../components/Header';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\n\nclass App extends Component {\n\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender() {\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t});\n\t\treturn (\n\t\t\t<div className='tc'>\n\t\t\t\t<Header />\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t  { isPending ? <h1>Loading</h1> :\n\t\t\t\t    <ErrorBoundary>\n\t\t\t\t      <CardList robots={filteredRobots} />\n\t\t\t\t    </ErrorBoundary>\n\t\t\t\t  }\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n } from './constants';\n\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\tswitch(action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, { isPending: true });\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false });\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false });\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger= createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n\t\t\t\t<Provider store={store}>\n\t\t\t\t\t<App />\n\t\t\t\t</Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}